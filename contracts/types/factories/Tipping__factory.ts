/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Tipping, TippingInterface } from "../Tipping";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "CannotSendTip",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address payable",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "message",
            type: "string",
          },
        ],
        indexed: false,
        internalType: "struct Tipping.Tip",
        name: "",
        type: "tuple",
      },
    ],
    name: "TipSend",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "sendTip",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "tips",
    outputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506106a8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a5c68c591461003b578063b86255eb14610067575b600080fd5b61004e610049366004610332565b61007c565b60405161005e9493929190610391565b60405180910390f35b61007a6100753660046103fc565b610150565b005b6000818154811061008c57600080fd5b600091825260209091206004909102018054600182015460028301546003840180546001600160a01b0394851696509290931693909290916100cd906104dc565b80601f01602080910402602001604051908101604052809291908181526020018280546100f9906104dc565b80156101465780601f1061011b57610100808354040283529160200191610146565b820191906000526020600020905b81548152906001019060200180831161012957829003601f168201915b5050505050905084565b604080516080810182526001600160a01b038087168252851660208201819052818301859052606082018490529151909160009185908381818185875af1925050503d80600081146101be576040519150601f19603f3d011682016040523d82523d6000602084013e6101c3565b606091505b505090508061020b5760405162e24b9360e71b815260206004820152601060248201526f21b0b73737ba1039b2b732103a34b81760811b604482015260640160405180910390fd5b60008054600181018255908052825160049091027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039384166001600160a01b031991821617825560208601517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e564840180549190951691161790925560408401517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56582015560608401518492917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56601906102f09082610565565b5050507f83962a9250073a1631cea61592be7c4770b062c11bbb5021a9fd4a0f2bca44d1826040516103229190610625565b60405180910390a1505050505050565b60006020828403121561034457600080fd5b5035919050565b6000815180845260005b8181101561037157602081850181015186830182015201610355565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906103c49083018461034b565b9695505050505050565b6001600160a01b03811681146103e357600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561041257600080fd5b843561041d816103ce565b9350602085013561042d816103ce565b925060408501359150606085013567ffffffffffffffff8082111561045157600080fd5b818701915087601f83011261046557600080fd5b813581811115610477576104776103e6565b604051601f8201601f19908116603f0116810190838211818310171561049f5761049f6103e6565b816040528281528a60208487010111156104b857600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600181811c908216806104f057607f821691505b60208210810361051057634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561056057600081815260208120601f850160051c8101602086101561053d5750805b601f850160051c820191505b8181101561055c57828155600101610549565b5050505b505050565b815167ffffffffffffffff81111561057f5761057f6103e6565b6105938161058d84546104dc565b84610516565b602080601f8311600181146105c857600084156105b05750858301515b600019600386901b1c1916600185901b17855561055c565b600085815260208120601f198616915b828110156105f7578886015182559484019460019091019084016105d8565b50858210156106155787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600060018060a01b038084511660208401528060208501511660408401525060408301516060830152606083015160808084015261066a60a084018261034b565b94935050505056fea26469706673582212204d10d7d906ac0b7712144d1d266b23b04f250023af6e3028abebc9e2b45eeb2164736f6c63430008110033";

type TippingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TippingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Tipping__factory extends ContractFactory {
  constructor(...args: TippingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Tipping> {
    return super.deploy(overrides || {}) as Promise<Tipping>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Tipping {
    return super.attach(address) as Tipping;
  }
  override connect(signer: Signer): Tipping__factory {
    return super.connect(signer) as Tipping__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TippingInterface {
    return new utils.Interface(_abi) as TippingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Tipping {
    return new Contract(address, _abi, signerOrProvider) as Tipping;
  }
}
